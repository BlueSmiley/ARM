


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MatchTimer, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000 FFFFF00C 
                       VICIntSelect
                               EQU              0xFFFFF00C
    5 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010
    6 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100
    7 00000000 FFFFF200 
                       VICVectPri0
                               EQU              0xFFFFF200
    8 00000000 FFFFFF00 
                       VICVectAddr
                               EQU              0xFFFFFF00
    9 00000000         
   10 00000000 E002C010 
                       PINSEL4 EQU              0xE002C010
   11 00000000 3FFFC041 
                       FIO2DIR1
                               EQU              0x3FFFC041
   12 00000000 3FFFC059 
                       FIO2SET1
                               EQU              0x3FFFC059
   13 00000000 3FFFC05D 
                       FIO2CLR1
                               EQU              0x3FFFC05D
   14 00000000 3FFFC055 
                       FIO2PIN1
                               EQU              0x3FFFC055
   15 00000000         
   16 00000000 E0004004 
                       T0TCR   EQU              0xE0004004
   17 00000000 E0004070 
                       T0CTCR  EQU              0xE0004070
   18 00000000 E0004018 
                       T0MR0   EQU              0xE0004018
   19 00000000 E0004014 
                       T0MCR   EQU              0xE0004014
   20 00000000 E000400C 
                       T0PR    EQU              0xE000400C
   21 00000000 E0004000 
                       T0IR    EQU              0xE0004000
   22 00000000         
   23 00000000 E01FC140 
                       EXTINT  EQU              0xE01FC140
   24 00000000 E01FC148 
                       EXTMODE EQU              0xE01FC148
   25 00000000 E01FC14C 
                       EXTPOLAR
                               EQU              0xE01FC14C
   26 00000000         
   27 00000000 E002C004 
                       PINSEL1 EQU              0xE002C004
   28 00000000 E006C000 
                       DACR    EQU              0xE006C000



ARM Macro Assembler    Page 2 


   29 00000000         ;
   30 00000000         ;notes - these are the (ARM periferal clock speed divide
                       d by 2 for high and low component) divided by frequencie
                       s of piano notes
   31 00000000         ;moving up an octave is a logical shift left (*2) of the
                        note (still need to converti it to a time by 12MHz / (N
                       OTE))
   32 00000000         ;https://en.wikipedia.org/wiki/Piano_key_frequencies
   33 00000000         ;NAME   TIME MAX_WAVES_PER_SECOND/NOTE FREQ =
   34 00000000 00035446 
                       A       EQU              218182      ;(12MHz/2)/27.5  A0
                                                            
   35 00000000 00032472 
                       AS      EQU              205938      ;6MHz/29.135 A#0
   36 00000000 0002F74E 
                       B       EQU              194382      ;6MHz/30.867 B0
   37 00000000 0002CCAC 
                       C       EQU              183468      ;6MHz/32.7032 C1
   38 00000000 0002A473 
                       CS      EQU              173171      ;6MHz/34.6478 C#1
   39 00000000 00027E7C 
                       D       EQU              163452      ;6MHz/36.7081 D1
   40 00000000 00025AA6 
                       DS      EQU              154278      ;6MHz/38.8909 D#1
   41 00000000 000238D3 
                       E       EQU              145619      ;6MHz/41.2034 E1
   42 00000000 000218E6 
                       F       EQU              137446      ;6MHz/43.6535 F1
   43 00000000 0001FAC4 
                       FS      EQU              129732      ;6MHz/46.2493 F#1
   44 00000000 0001DE52 
                       G       EQU              122450      ;6MHz/48.9994 G
   45 00000000 0001C37A 
                       GS      EQU              115578      ;6MHz/51.9131 G#1
   46 00000000 00005996 
                       C4      EQU              22934       ;6MHz / (261.626Hz 
                                                            * 2)
   47 00000000         
   48 00000000         ;
   49 00000000         ; A value between 0 and 1023 representing the volume
   50 00000000         ;
   51 00000000 000003FF 
                       volume  EQU              1023
   52 00000000         
   53 00000000         start
   54 00000000         
   55 00000000 E59F5244        LDR              R5, =count  ; addr = address of
                                                             count;
   56 00000004 E3A06000        MOV              R6, #0      ; tmp = 0;
   57 00000008 E5856000        STR              R6, [R5]    ; Memory.Word(addr)
                                                             = tmp;
   58 0000000C         
   59 0000000C E59F523C        LDR              R5,=boolean
   60 00000010 E3A06000        LDR              R6,=0
   61 00000014 E5C56000        STRB             R6, [R5]
   62 00000018         
   63 00000018         ; Configure pin P0.26 for AOUT (DAC analog out)
   64 00000018 E59F5234        LDR              R5, =PINSEL1
   65 0000001C E5956000        LDR              R6, [R5]



ARM Macro Assembler    Page 3 


   66 00000020 E3C66603        BIC              R6, R6, #(0x03 << 20)
   67 00000024 E3866602        ORR              R6, R6, #(0x02 << 20)
   68 00000028 E5856000        STR              R6, [R5]
   69 0000002C         
   70 0000002C         ; Enable P2.10 for EINT0
   71 0000002C E59F5224        LDR              R5, =PINSEL4
   72 00000030 E5956000        LDR              R6, [R5]
   73 00000034 E3C66603        BIC              R6, #(0x03 << 20)
   74 00000038 E3866601        ORR              R6, #(0x01 << 20)
   75 0000003C E5856000        STR              R6, [R5]
   76 00000040         
   77 00000040         ; Set edge-sensitive mode for EINT0
   78 00000040 E59F5214        LDR              R5, =EXTMODE
   79 00000044 E5956000        LDR              R6, [R5]
   80 00000048 E3866001        ORR              R6, #1
   81 0000004C E5C56000        STRB             R6, [R5]
   82 00000050         
   83 00000050         ; Set rising-edge mode for EINT0
   84 00000050 E59F5208        LDR              R5, =EXTPOLAR
   85 00000054 E5956000        LDR              R6, [R5]
   86 00000058 E3C66001        BIC              R6, #1
   87 0000005C E5C56000        STRB             R6, [R5]
   88 00000060         
   89 00000060         ; Reset EINT0
   90 00000060 E59F51FC        LDR              R5, =EXTINT
   91 00000064 E3A06001        MOV              R6, #1
   92 00000068 E5C56000        STRB             R6, [R5]
   93 0000006C         
   94 0000006C         
   95 0000006C         
   96 0000006C         ;
   97 0000006C         ; Configure push button (Vector 0x14) interrupt handler
   98 0000006C         ;
   99 0000006C         
  100 0000006C E3A0300E        MOV              R3, #14     ; vector = 14;
  101 00000070 E3A04001        MOV              R4, #1      ; vmask = 1;
  102 00000074 E1A04314        MOV              R4, R4, LSL R3 ; vmask = vmask 
                                                            << vector;
  103 00000078         
  104 00000078         
  105 00000078         ; VICIntSelect - Set Vector 0x14 for IRQ (clear bit 14)
  106 00000078 E59F51E8        LDR              R5, =VICIntSelect ; addr = VICI
                                                            ntSelect;
  107 0000007C E5956000        LDR              R6, [R5]    ; tmp = Memory.Word
                                                            (addr);  
  108 00000080 E1C66004        BIC              R6, R6, R4  ; Clear bit for Vec
                                                            tor 0x14
  109 00000084 E5856000        STR              R6, [R5]    ; Memory.Word(addr)
                                                             = tmp;
  110 00000088         
  111 00000088         ; Set Priority to lowest (15)
  112 00000088 E59F51DC        LDR              R5, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  113 0000008C E3A0600F        MOV              R6, #0xF    ; pri = 15;
  114 00000090 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4); = pri;
  115 00000094         
  116 00000094         ; Set handler address



ARM Macro Assembler    Page 4 


  117 00000094 E59F51D4        LDR              R5, =VICVectAddr0 ; addr = VICV
                                                            ectAddr0;
  118 00000098 E59F61D4        LDR              R6, =ButtonHandler ; handler = 
                                                            address of ButtonHa
                                                            ndler;
  119 0000009C E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = handler;
  120 000000A0         
  121 000000A0         
  122 000000A0         ; VICIntEnable
  123 000000A0 E59F51D0        LDR              R5, =VICIntEnable ; addr = VICV
                                                            ectEnable;
  124 000000A4 E5854000        STR              R4, [R5]    ; enable interrupts
                                                             for vector 0x14
  125 000000A8         
  126 000000A8         ;timer
  127 000000A8         ;
  128 000000A8         ; Configure TIMER0 for 1 second interrupts
  129 000000A8         ;
  130 000000A8         
  131 000000A8         ; Stop and reset TIMER0 using Timer Control Register
  132 000000A8         ; Set bit 0 of TCR to 0 to diasble TIMER
  133 000000A8         ; Set bit 1 of TCR to 1 to reset TIMER
  134 000000A8 E59F51CC        LDR              R5, =T0TCR
  135 000000AC E3A06002        LDR              R6, =0x2
  136 000000B0 E5C56000        STRB             R6, [R5]
  137 000000B4         
  138 000000B4         ; Clear any previous TIMER0 interrupt by writing 0xFF to
                        the TIMER0
  139 000000B4         ; Interrupt Register (T0IR)
  140 000000B4 E59F51C4        LDR              R5, =T0IR
  141 000000B8 E3A060FF        LDR              R6, =0xFF
  142 000000BC E5C56000        STRB             R6, [R5]
  143 000000C0         
  144 000000C0         ; Set timer mode using Count Timer Control Register
  145 000000C0         ; Set bits 0 and 1 of CTCR to 00
  146 000000C0         ; for timer mode
  147 000000C0 E59F51BC        LDR              R5, =T0CTCR
  148 000000C4 E3A06000        LDR              R6, =0x00
  149 000000C8 E5C56000        STRB             R6, [R5]
  150 000000CC         
  151 000000CC         ; Set match register for 1 sec using Match Register
  152 000000CC         ; Assuming a 12Mhz clock, set MR to 12,000,000
  153 000000CC E59F51B4        LDR              R5, =T0MR0
  154 000000D0 E59F61B4        LDR              R6, =12000000
  155 000000D4 E5856000        STR              R6, [R5]
  156 000000D8         
  157 000000D8         ; Interrupt and restart on match using Match Control Reg
                       ister
  158 000000D8         ; Set bit 0 of MCR to 1 to turn on interrupts
  159 000000D8         ; Set bit 1 of MCR to 1 to reset counter to 0 after ever
                       y match
  160 000000D8         ; Set bit 2 of MCR to 0 to leave the counter enabled aft
                       er match
  161 000000D8 E59F51B0        LDR              R5, =T0MCR
  162 000000DC E3A06003        LDR              R6, =0x03
  163 000000E0 E1C560B0        STRH             R6, [R5]
  164 000000E4         



ARM Macro Assembler    Page 5 


  165 000000E4         ; Turn off prescaling using Prescale Register
  166 000000E4         ; (prescaling is only needed to measure long intervals)
  167 000000E4 E59F51A8        LDR              R5, =T0PR
  168 000000E8 E3A06000        LDR              R6, =0
  169 000000EC E5856000        STR              R6, [R5]
  170 000000F0         
  171 000000F0         ;
  172 000000F0         ; Configure VIC for TIMER0 interrupts
  173 000000F0         ;
  174 000000F0         
  175 000000F0         ; Useful VIC vector numbers and masks for following code
                       
  176 000000F0 E3A03004        LDR              R3, =4      ; vector 4
  177 000000F4 E3A04010        LDR              R4, =(1 << 4) ; bit mask for ve
                                                            ctor 4
  178 000000F8         
  179 000000F8         ; VICIntSelect - Clear bit 4 of VICIntSelect register to
                        cause
  180 000000F8         ; channel 4 (TIMER0) to raise IRQs (not FIQs)
  181 000000F8 E59F5168        LDR              R5, =VICIntSelect ; addr = VICV
                                                            ectSelect;
  182 000000FC E5956000        LDR              R6, [R5]    ; tmp = Memory.Word
                                                            (addr);  
  183 00000100 E1C66004        BIC              R6, R6, R4  ; Clear bit for Vec
                                                            tor 0x04
  184 00000104 E5856000        STR              R6, [R5]    ; Memory.Word(addr)
                                                             = tmp;
  185 00000108         
  186 00000108         ; Set Priority for VIC channel 4 (TIMER0) to lowest (15)
                        by setting
  187 00000108         ; VICVectPri4 to 15. Note: VICVectPri4 is the element at
                        index 4 of an
  188 00000108         ; array of 4-byte values that starts at VICVectPri0.
  189 00000108         ; i.e. VICVectPri4=VICVectPri0+(4*4)
  190 00000108 E59F515C        LDR              R5, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  191 0000010C E3A0600F        MOV              R6, #15     ; pri = 15;
  192 00000110 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4); = pri;
  193 00000114         
  194 00000114         ; Set Handler routine address for VIC channel 4 (TIMER0)
                        to address of
  195 00000114         ; our handler routine (TimerHandler). Note: VICVectAddr4
                        is the element
  196 00000114         ; at index 4 of an array of 4-byte values that starts at
                        VICVectAddr0.
  197 00000114         ; i.e. VICVectAddr4=VICVectAddr0+(4*4)
  198 00000114 E59F5154        LDR              R5, =VICVectAddr0 ; addr = VICV
                                                            ectAddr0;
  199 00000118 E59F6178        LDR              R6, =TimerHandler ; handler = a
                                                            ddress of TimerHand
                                                            ler;
  200 0000011C E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = handler
  201 00000120         
  202 00000120         
  203 00000120         ; Enable VIC channel 4 (TIMER0) by writing a 1 to bit 4 



ARM Macro Assembler    Page 6 


                       of VICIntEnable
  204 00000120 E59F5150        LDR              R5, =VICIntEnable ; addr = VICI
                                                            ntEnable;
  205 00000124 E5854000        STR              R4, [R5]    ; enable Timers for
                                                             vector 0x4
  206 00000128         
  207 00000128         ;
  208 00000128         ; Start TIMER0
  209 00000128         ;
  210 00000128         
  211 00000128         ; Start TIMER0 using the Timer Control Register
  212 00000128         ; Set bit 0 of TCR to enable the timer
  213 00000128 E59F514C        LDR              R5, =T0TCR
  214 0000012C E3A06001        LDR              R6, =0x01
  215 00000130 E5C56000        STRB             R6, [R5]
  216 00000134         repeat
  217 00000134 E59F5114        LDR              R5,=boolean
  218 00000138 E5D56000        LDRB             R6,     [R5]
  219 0000013C E3560000        CMP              R6,     #0  ;check if buzzer of
                                                            f
  220 00000140 0AFFFFFB        BEQ              repeat      ;if off
  221 00000144 EB00002D        BL               buzzer
  222 00000148 EAFFFFF9        b                repeat      ;infinite loop
  223 0000014C EAFFFFFE 
                       stop    B                stop
  224 00000150         
  225 00000150         ;
  226 00000150         ; EINT0 Button Handler
  227 00000150         ;
  228 00000150         ButtonHandler
  229 00000150 E24EE004        SUB              LR, LR, #4  ; Adjust return add
                                                            ress
  230 00000154 E92D5FFF        STMFD            sp!, {r0-r12, LR} 
                                                            ; save registers
  231 00000158         
  232 00000158         ;
  233 00000158         ; Reset EINT0
  234 00000158         ;
  235 00000158 E59F5104        LDR              R5, =EXTINT
  236 0000015C E3A06001        MOV              R6, #1
  237 00000160 E5C56000        STRB             R6, [R5]
  238 00000164         
  239 00000164 E59F5110        LDR              R5, =T0TCR
  240 00000168 E5D56000        LDRB             R6,     [R5] ;gets first byte
  241 0000016C E2266001        EOR              R6,     R6,     #1 ;toggles tim
                                                            er  as bit 0 is set
                                                             to enable
  242 00000170 E5C56000        STRB             R6, [R5]
  243 00000174         ;
  244 00000174         ; Clear source of interrupt
  245 00000174         ;
  246 00000174 E59F3124        LDR              R3, =VICVectAddr ; addr = VICVe
                                                            ctAddr
  247 00000178 E3A04000        MOV              R4, #0      ; tmp = 0;
  248 0000017C E5834000        STR              R4, [R3]    ; Memory.Word(addr)
                                                             = tmp;
  249 00000180         
  250 00000180         ;
  251 00000180         ; Return



ARM Macro Assembler    Page 7 


  252 00000180         ;
  253 00000180 E8FD9FFF        LDMFD            sp!, {r0-r12, PC}^ ; restore re
                                                            gister and CPSR
  254 00000184         
  255 00000184         TimerHandler
  256 00000184 E24EE004        SUB              LR, LR, #4  ; Adjust return add
                                                            ress (because the p
                                                            rocessor
  257 00000188         ; sets it 4 bytes after the real return address!!)
  258 00000188         
  259 00000188 E92D5FFF        STMFD            sp!, {r0-r12, LR} ; save regist
                                                            ers to avoid uninte
                                                            nded side effects
  260 0000018C         
  261 0000018C         ; Reset TIMER0 interrupt by writing 0xFF to T0IR
  262 0000018C E59F50EC        LDR              R5, =T0IR
  263 00000190 E3A060FF        MOV              R6, #0xFF
  264 00000194 E5C56000        STRB             R6, [R5]
  265 00000198         
  266 00000198 E59F50AC        LDR              R5,=count
  267 0000019C E5956000        LDR              R6,     [r5]
  268 000001A0 E3A05005        LDR              R5,=MATCH_TIME
  269 000001A4 E1560005        CMP              R6,     R5
  270 000001A8 3A000007        BLO              matchNotOver
  271 000001AC         
  272 000001AC E59F5098        LDR              R5,=count
  273 000001B0 E5956000        LDR              R6,     [R5]
  274 000001B4 E3A0500A        LDR              R5,=BUZZING_TIME
  275 000001B8 E1560005        CMP              R6,     R5
  276 000001BC 2A000008        BHS              turnOff
  277 000001C0         
  278 000001C0 E59F5088        LDR              R5,=boolean
  279 000001C4 E3A06001        LDR              R6,=1
  280 000001C8 E5C56000        STRB             R6, [R5]
  281 000001CC         matchNotOver
  282 000001CC E59F5078        LDR              R5,=count
  283 000001D0 E5956000        LDR              R6,     [R5]
  284 000001D4 E2866001        ADD              R6,     R6,     #1
  285 000001D8 E59F506C        LDR              R5,=count
  286 000001DC E5856000        STR              R6,     [R5]
  287 000001E0 EA000002        b                finishTick
  288 000001E4         turnOff
  289 000001E4 E59F5064        LDR              R5,=boolean
  290 000001E8 E3A06000        LDR              R6,=0
  291 000001EC E5C56000        STRB             R6, [R5]
  292 000001F0         finishTick
  293 000001F0         ; Clear source of interrupt by writing 0 to VICVectAddr
  294 000001F0 E59F50A8        LDR              R5, =VICVectAddr
  295 000001F4 E3A06000        MOV              R6, #0
  296 000001F8 E5856000        STR              R6, [R5]
  297 000001FC         
  298 000001FC         ; Return
  299 000001FC E8FD9FFF        LDMFD            sp!, {r0-r12, PC}^ ; restore re
                                                            gister and CPSR
  300 00000200         ; your interrupt handlers go here
  301 00000200         
  302 00000200         ;buzzer subrouting
  303 00000200         ;parameter none
  304 00000200         ;returns void



ARM Macro Assembler    Page 8 


  305 00000200         buzzer
  306 00000200 E92D5FF0        STMFD            SP!,    {R4-R12,LR} ; while (fo
                                                            rever) { 
  307 00000204         ;
  308 00000204         ; Change analog output to cause square wave signal
  309 00000204         ; If signal is currently high, send it low. If its low, 
                       send it high
  310 00000204         ;
  311 00000204         ; Load the current DAC output value
  312 00000204 E59F50B8        LDR              R5, =DACR
  313 00000208 E5956000        LDR              R6, [R5]
  314 0000020C         
  315 0000020C         ; Mask out all but bits 15...6
  316 0000020C E59F70B4        LDR              R7, =0x0000FFC0
  317 00000210 E0066007        AND              R6, R6, R7
  318 00000214         
  319 00000214 E3560000        CMP              R6, #0      ; if (DACR == 0)
  320 00000218 1A000001        BNE              high        ; {
  321 0000021C E59F60A4        LDR              R6, =(volume << 6) ;  DACR = vo
                                                            lume << 6
  322 00000220 EA000000        B                endif       ; }
  323 00000224         high                                 ; else {
  324 00000224 E3A06000        LDR              R6, =0      ;  DACR = 0
  325 00000228         endif                                ; }
  326 00000228 E5856000        STR              R6, [R5]    ; store new DACR
  327 0000022C         
  328 0000022C         ; Short delay
  329 0000022C E59F4098        LDR              R4, =C4     ;  square wave dela
                                                            y
  330 00000230         ;LSR R4, R4, #3  ;MOVE UP N OCTAVES (APPROX)
  331 00000230         whDelay                              ;   while (count > 
                                                            0)
  332 00000230 E3540000        CMP              R4, #0      ;   {
  333 00000234 0A000001        BEQ              eWhDelay    ;
  334 00000238 E2444001        SUB              R4, R4, #1  ;     count = count
                                                             - 1
  335 0000023C EAFFFFFB        B                whDelay     ;   }
  336 00000240         eWhDelay                             ;
  337 00000240 E8BD9FF0        LDMFD            SP!,    {R4-R12,PC}
  338 00000244         
  339 00000244 00 00 00 
              00       count   SPACE            4
  340 00000248 00000005 
                       MATCH_TIME
                               EQU              5
  341 00000248 0000000A 
                       BUZZING_TIME
                               EQU              10
  342 00000248 00 00 00 
              00       boolean SPACE            4
  343 0000024C         
  344 0000024C                 END
              00000000 
              00000000 
              E002C004 
              E002C010 
              E01FC148 
              E01FC14C 
              E01FC140 



ARM Macro Assembler    Page 9 


              FFFFF00C 
              FFFFF200 
              FFFFF100 
              00000000 
              FFFFF010 
              E0004004 
              E0004000 
              E0004070 
              E0004018 
              00B71B00 
              E0004014 
              E000400C 
              00000000 
              00000000 
              FFFFFF00 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E006C000 
              0000FFC0 
              00005996 
Command Line: --debug --xref --apcs=interwork --depend=.\matchtimer.d -o.\match
timer.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Ph
ilips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="
NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVE
C SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\mat
chtimer.lst MatchTimer.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ButtonHandler 00000150

Symbol: ButtonHandler
   Definitions
      At line 228 in file MatchTimer.s
   Uses
      At line 118 in file MatchTimer.s
Comment: ButtonHandler used once
MatchTimer 00000000

Symbol: MatchTimer
   Definitions
      At line 1 in file MatchTimer.s
   Uses
      None
Comment: MatchTimer unused
TimerHandler 00000184

Symbol: TimerHandler
   Definitions
      At line 255 in file MatchTimer.s
   Uses
      At line 199 in file MatchTimer.s
Comment: TimerHandler used once
boolean 00000248

Symbol: boolean
   Definitions
      At line 342 in file MatchTimer.s
   Uses
      At line 59 in file MatchTimer.s
      At line 217 in file MatchTimer.s
      At line 278 in file MatchTimer.s
      At line 289 in file MatchTimer.s

buzzer 00000200

Symbol: buzzer
   Definitions
      At line 305 in file MatchTimer.s
   Uses
      At line 221 in file MatchTimer.s
Comment: buzzer used once
count 00000244

Symbol: count
   Definitions
      At line 339 in file MatchTimer.s
   Uses
      At line 55 in file MatchTimer.s
      At line 266 in file MatchTimer.s
      At line 272 in file MatchTimer.s
      At line 282 in file MatchTimer.s
      At line 285 in file MatchTimer.s

eWhDelay 00000240

Symbol: eWhDelay
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 336 in file MatchTimer.s
   Uses
      At line 333 in file MatchTimer.s
Comment: eWhDelay used once
endif 00000228

Symbol: endif
   Definitions
      At line 325 in file MatchTimer.s
   Uses
      At line 322 in file MatchTimer.s
Comment: endif used once
finishTick 000001F0

Symbol: finishTick
   Definitions
      At line 292 in file MatchTimer.s
   Uses
      At line 287 in file MatchTimer.s
Comment: finishTick used once
high 00000224

Symbol: high
   Definitions
      At line 323 in file MatchTimer.s
   Uses
      At line 320 in file MatchTimer.s
Comment: high used once
matchNotOver 000001CC

Symbol: matchNotOver
   Definitions
      At line 281 in file MatchTimer.s
   Uses
      At line 270 in file MatchTimer.s
Comment: matchNotOver used once
repeat 00000134

Symbol: repeat
   Definitions
      At line 216 in file MatchTimer.s
   Uses
      At line 220 in file MatchTimer.s
      At line 222 in file MatchTimer.s

start 00000000

Symbol: start
   Definitions
      At line 53 in file MatchTimer.s
   Uses
      At line 3 in file MatchTimer.s
Comment: start used once
stop 0000014C

Symbol: stop
   Definitions
      At line 223 in file MatchTimer.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 223 in file MatchTimer.s
Comment: stop used once
turnOff 000001E4

Symbol: turnOff
   Definitions
      At line 288 in file MatchTimer.s
   Uses
      At line 276 in file MatchTimer.s
Comment: turnOff used once
whDelay 00000230

Symbol: whDelay
   Definitions
      At line 331 in file MatchTimer.s
   Uses
      At line 335 in file MatchTimer.s
Comment: whDelay used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

A 00035446

Symbol: A
   Definitions
      At line 34 in file MatchTimer.s
   Uses
      None
Comment: A unused
AS 00032472

Symbol: AS
   Definitions
      At line 35 in file MatchTimer.s
   Uses
      None
Comment: AS unused
B 0002F74E

Symbol: B
   Definitions
      At line 36 in file MatchTimer.s
   Uses
      None
Comment: B unused
BUZZING_TIME 0000000A

Symbol: BUZZING_TIME
   Definitions
      At line 341 in file MatchTimer.s
   Uses
      At line 274 in file MatchTimer.s
Comment: BUZZING_TIME used once
C 0002CCAC

Symbol: C
   Definitions
      At line 37 in file MatchTimer.s
   Uses
      None
Comment: C unused
C4 00005996

Symbol: C4
   Definitions
      At line 46 in file MatchTimer.s
   Uses
      At line 329 in file MatchTimer.s
Comment: C4 used once
CS 0002A473

Symbol: CS
   Definitions
      At line 38 in file MatchTimer.s
   Uses
      None
Comment: CS unused
D 00027E7C

Symbol: D



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 39 in file MatchTimer.s
   Uses
      None
Comment: D unused
DACR E006C000

Symbol: DACR
   Definitions
      At line 28 in file MatchTimer.s
   Uses
      At line 312 in file MatchTimer.s
Comment: DACR used once
DS 00025AA6

Symbol: DS
   Definitions
      At line 40 in file MatchTimer.s
   Uses
      None
Comment: DS unused
E 000238D3

Symbol: E
   Definitions
      At line 41 in file MatchTimer.s
   Uses
      None
Comment: E unused
EXTINT E01FC140

Symbol: EXTINT
   Definitions
      At line 23 in file MatchTimer.s
   Uses
      At line 90 in file MatchTimer.s
      At line 235 in file MatchTimer.s

EXTMODE E01FC148

Symbol: EXTMODE
   Definitions
      At line 24 in file MatchTimer.s
   Uses
      At line 78 in file MatchTimer.s
Comment: EXTMODE used once
EXTPOLAR E01FC14C

Symbol: EXTPOLAR
   Definitions
      At line 25 in file MatchTimer.s
   Uses
      At line 84 in file MatchTimer.s
Comment: EXTPOLAR used once
F 000218E6

Symbol: F
   Definitions
      At line 42 in file MatchTimer.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: F unused
FIO2CLR1 3FFFC05D

Symbol: FIO2CLR1
   Definitions
      At line 13 in file MatchTimer.s
   Uses
      None
Comment: FIO2CLR1 unused
FIO2DIR1 3FFFC041

Symbol: FIO2DIR1
   Definitions
      At line 11 in file MatchTimer.s
   Uses
      None
Comment: FIO2DIR1 unused
FIO2PIN1 3FFFC055

Symbol: FIO2PIN1
   Definitions
      At line 14 in file MatchTimer.s
   Uses
      None
Comment: FIO2PIN1 unused
FIO2SET1 3FFFC059

Symbol: FIO2SET1
   Definitions
      At line 12 in file MatchTimer.s
   Uses
      None
Comment: FIO2SET1 unused
FS 0001FAC4

Symbol: FS
   Definitions
      At line 43 in file MatchTimer.s
   Uses
      None
Comment: FS unused
G 0001DE52

Symbol: G
   Definitions
      At line 44 in file MatchTimer.s
   Uses
      None
Comment: G unused
GS 0001C37A

Symbol: GS
   Definitions
      At line 45 in file MatchTimer.s
   Uses
      None
Comment: GS unused



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

MATCH_TIME 00000005

Symbol: MATCH_TIME
   Definitions
      At line 340 in file MatchTimer.s
   Uses
      At line 268 in file MatchTimer.s
Comment: MATCH_TIME used once
PINSEL1 E002C004

Symbol: PINSEL1
   Definitions
      At line 27 in file MatchTimer.s
   Uses
      At line 64 in file MatchTimer.s
Comment: PINSEL1 used once
PINSEL4 E002C010

Symbol: PINSEL4
   Definitions
      At line 10 in file MatchTimer.s
   Uses
      At line 71 in file MatchTimer.s
Comment: PINSEL4 used once
T0CTCR E0004070

Symbol: T0CTCR
   Definitions
      At line 17 in file MatchTimer.s
   Uses
      At line 147 in file MatchTimer.s
Comment: T0CTCR used once
T0IR E0004000

Symbol: T0IR
   Definitions
      At line 21 in file MatchTimer.s
   Uses
      At line 140 in file MatchTimer.s
      At line 262 in file MatchTimer.s

T0MCR E0004014

Symbol: T0MCR
   Definitions
      At line 19 in file MatchTimer.s
   Uses
      At line 161 in file MatchTimer.s
Comment: T0MCR used once
T0MR0 E0004018

Symbol: T0MR0
   Definitions
      At line 18 in file MatchTimer.s
   Uses
      At line 153 in file MatchTimer.s
Comment: T0MR0 used once
T0PR E000400C




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Symbol: T0PR
   Definitions
      At line 20 in file MatchTimer.s
   Uses
      At line 167 in file MatchTimer.s
Comment: T0PR used once
T0TCR E0004004

Symbol: T0TCR
   Definitions
      At line 16 in file MatchTimer.s
   Uses
      At line 134 in file MatchTimer.s
      At line 213 in file MatchTimer.s
      At line 239 in file MatchTimer.s

VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 5 in file MatchTimer.s
   Uses
      At line 123 in file MatchTimer.s
      At line 204 in file MatchTimer.s

VICIntSelect FFFFF00C

Symbol: VICIntSelect
   Definitions
      At line 4 in file MatchTimer.s
   Uses
      At line 106 in file MatchTimer.s
      At line 181 in file MatchTimer.s

VICVectAddr FFFFFF00

Symbol: VICVectAddr
   Definitions
      At line 8 in file MatchTimer.s
   Uses
      At line 246 in file MatchTimer.s
      At line 294 in file MatchTimer.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 6 in file MatchTimer.s
   Uses
      At line 117 in file MatchTimer.s
      At line 198 in file MatchTimer.s

VICVectPri0 FFFFF200

Symbol: VICVectPri0
   Definitions
      At line 7 in file MatchTimer.s
   Uses
      At line 112 in file MatchTimer.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 190 in file MatchTimer.s

volume 000003FF

Symbol: volume
   Definitions
      At line 51 in file MatchTimer.s
   Uses
      At line 321 in file MatchTimer.s
Comment: volume used once
37 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file MatchTimer.s
   Uses
      None
Comment: main unused
1 symbol
393 symbols in table
