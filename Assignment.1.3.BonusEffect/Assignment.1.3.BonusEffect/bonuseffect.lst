


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             BonusEffect, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getPicAddr
    4 00000000                 IMPORT           putPic
    5 00000000                 IMPORT           getPicWidth
    6 00000000                 IMPORT           getPicHeight
    7 00000000                 EXPORT           start
    8 00000000                 PRESERVE8
    9 00000000         ;doing edge detection with three major parts
   10 00000000         ;pre-processing:
   11 00000000         ;optional filter
   12 00000000         ;converting to greyscale + adding gaussian filter to rem
                       ove noise
   13 00000000         ;processing:
   14 00000000         ;sobel edge detection approximation using kernel
   15 00000000         ;post-processing
   16 00000000         ;normalising image to range of 0-255
   17 00000000         ;thresholding and linking result
   18 00000000         start
   19 00000000         
   20 00000000 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
   21 00000004 E1A04000        MOV              R4, R0
   22 00000008 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
   23 0000000C E1A05000        MOV              R5, R0
   24 00000010 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
   25 00000014 E1A06000        MOV              R6, R0
   26 00000018         
   27 00000018 E1A00004        MOV              R0,     R4
   28 0000001C E1A01005        MOV              R1,     R5
   29 00000020 E1A02006        MOV              R2,     R6
   30 00000024         
   31 00000024 E59F38F8        LDR              R3,=0x0000FFFF
   32 00000028 EB000091        BL               primaryFilter
   33 0000002C         
   34 0000002C E1A00004        MOV              R0,     R4
   35 00000030 E1A01005        MOV              R1,     R5
   36 00000034 E1A02006        MOV              R2,     R6
   37 00000038 EB0000A2        BL               picToGrey
   38 0000003C         
   39 0000003C E00B0695        MUL              R11,    R5,     R6 ;area
   40 00000040 E084B10B        ADD              R11,    R4,    R11,      LSL   
  #2
   41 00000044         
   42 00000044 E3A07000        LDR              R7, = 0     ;boolean
   43 00000048 E3A02C01        LDR              R2, =   256 ;default max and mi
                                                            n
   44 0000004C E52D2004        STR              R2,     [SP,    #-4]!
   45 00000050 E52D2004        STR              R2,     [SP,    #-4]!
   46 00000054         
   47 00000054         
   48 00000054         iteraterepeat
   49 00000054 E3A09000        LDR              R9,=0       ;column index
   50 00000058 E3A0A000        LDR              R10,=0      ;row index



ARM Macro Assembler    Page 2 


   51 0000005C         iterate
   52 0000005C E1590006        CMP              R9,     R6
   53 00000060 3A000001        BLO              currentrow
   54 00000064         ;increment row index and reset column when equal to widt
                       h
   55 00000064 E28AA001        ADD              R10,     R10,     #1
   56 00000068 E3A09000        LDR              R9, =0
   57 0000006C         currentrow
   58 0000006C E15A0005        CMP              R10,     R5
   59 00000070 2A000034        BHS              final
   60 00000074         ;end if row index = height as indexes are 0 indexed
   61 00000074 E008069A        MUL              R8,     R10,     R6 ;row length
                                                             by row index
   62 00000078 E0888009        ADD              R8,     R8,     R9 ;column inde
                                                            x + offset
   63 0000007C         
   64 0000007C E3570001        CMP              R7,     #1
   65 00000080 0A000008        BEQ              sobeldet
   66 00000084 8A000021        BHI              finisher
   67 00000088         
   68 00000088 E52DA004        STR              R10,     [SP,    #-4]! 
                                                            ;pushes row index
   69 0000008C E52D9004        STR              R9,     [SP,    #-4]! ;pushes c
                                                            olumn index
   70 00000090 E52D4004        STR              R4,     [SP,    #-4]! ;pushes m
                                                            em addrress
   71 00000094 E52D6004        STR              R6,     [SP,    #-4]! ;pushes r
                                                            ow length/width
   72 00000098 E52D5004        STR              R5,     [SP,    #-4]! ;pushes c
                                                            olumn length/height
                                                                  
   73 0000009C EB0000F6        BL               gaussianBlur
   74 000000A0 E28DD014        ADD              SP,     SP,     #20 ;pops stack
                                                            
   75 000000A4 EA000024        b                movetonextindex
   76 000000A8         sobeldet
   77 000000A8 E52DA004        STR              R10,     [SP,    #-4]! 
                                                            ;pushes row index
   78 000000AC E52D9004        STR              R9,     [SP,    #-4]! ;pushes c
                                                            olumn index
   79 000000B0 E52D4004        STR              R4,     [SP,    #-4]! ;pushes m
                                                            em addrress
   80 000000B4 E52D6004        STR              R6,     [SP,    #-4]! ;pushes r
                                                            ow length/width
   81 000000B8 E52D5004        STR              R5,     [SP,    #-4]! ;pushes c
                                                            olumn length/height
                                                            
   82 000000BC EB0000A5        BL               edgeDetection
   83 000000C0 E28DD014        ADD              SP,     SP,     #20 ;pops stack
                                                            
   84 000000C4         
   85 000000C4 E49D2004        LDR              R2,     [SP],   #4 ;max
   86 000000C8 E49D3004        LDR              R3,     [SP],   #4 ;min
   87 000000CC         
   88 000000CC E52D0004        STR              R0,     [SP,    #-4]! 
                                                            ;back up pixel
   89 000000D0 EB0001D1        BL               getPicBlue  ;gets blue componen
                                                            t/luminance
   90 000000D4         



ARM Macro Assembler    Page 3 


   91 000000D4 E35200FF        CMP              R2,    #255 ;check if row 0
   92 000000D8 9A000002        BLS              maxcheck    ;if at default valu
                                                            es overwrite
   93 000000DC E1A02000        MOV              R2,     R0
   94 000000E0 E1A03000        MOV              R3,     R0
   95 000000E4 EA000005        b                pushminmax
   96 000000E8         maxcheck
   97 000000E8 E1520000        CMP              R2,     R0  ;compare max to pix
                                                            el intensity
   98 000000EC 2A000000        BHS              mincheck
   99 000000F0 E1A02000        MOV              R2,     R0  ;replace max
  100 000000F4         mincheck
  101 000000F4 E1530000        CMP              R3,     R0
  102 000000F8 9A000000        BLS              pushminmax
  103 000000FC E1A03000        MOV              R3,     R0
  104 00000100         pushminmax
  105 00000100 E49D0004        LDR              R0,     [SP],   #4 
                                                            ;restore pixel
  106 00000104 E52D3004        STR              R3,     [SP,    #-4]! ;push in 
                                                            reverse order of po
                                                            p
  107 00000108 E52D2004        STR              R2,     [SP,    #-4]!
  108 0000010C EA00000A        b                movetonextindex
  109 00000110         finisher
  110 00000110 E3A000A0        LDR              R0, = 160   ;minimum threshold
  111 00000114 E52D0004        STR              R0,     [SP,    #-4]! 
                                                            ;pushes min thr
  112 00000118 E3A000B4        LDR              R0, = 180
  113 0000011C E52D0004        STR              R0,     [SP,    #-4]! 
                                                            ;pushes max thr
  114 00000120         
  115 00000120 E52DA004        STR              R10,     [SP,    #-4]! 
                                                            ;pushes row index
  116 00000124 E52D9004        STR              R9,     [SP,    #-4]! ;pushes c
                                                            olumn index
  117 00000128 E52D4004        STR              R4,     [SP,    #-4]! ;pushes m
                                                            em addrress
  118 0000012C E52D6004        STR              R6,     [SP,    #-4]! ;pushes r
                                                            ow length/width
  119 00000130 E52D5004        STR              R5,     [SP,    #-4]! ;pushes c
                                                            olumn length/height
                                                                  
  120 00000134 EB000018        BL               thresholding
  121 00000138 E28DD01C        ADD              SP,     SP,     #28 ;pops stack
                                                            
  122 0000013C         
  123 0000013C         movetonextindex
  124 0000013C E78B0108        STR              R0,     [R11,   R8,      LSL   
  #2] 
                                                            ;stores new pixel 
  125 00000140 E2899001        ADD              R9,     R9,     #1 ;increment c
                                                            olumn index
  126 00000144 EAFFFFC4        b                iterate
  127 00000148         
  128 00000148         final
  129 00000148 E1A00004        MOV              R0,     R4
  130 0000014C E1A0100B        MOV              R1,     R11
  131 00000150 E1A02005        MOV              R2,     R5
  132 00000154 E1A03006        MOV              R3,     R6



ARM Macro Assembler    Page 4 


  133 00000158 EB00006E        BL               transfer
  134 0000015C E2877001        ADD              R7,     R7,     #1 
                                                            ;change boolean
  135 00000160 E3570002        CMP              R7,     #2  ;boolean check
  136 00000164 3AFFFFBA        BLO              iteraterepeat
  137 00000168         
  138 00000168 E49D2004        LDR              R2,     [SP],   #4 ;max
  139 0000016C E49D3004        LDR              R3,     [SP],   #4 ;min 
  140 00000170 E52D4004        STR              R4,     [SP,    #-4]! ;pushes m
                                                            em addrress
  141 00000174 E52D6004        STR              R6,     [SP,    #-4]! ;pushes r
                                                            ow length/width
  142 00000178 E52D5004        STR              R5,     [SP,    #-4]! ;pushes c
                                                            olumn length/height
                                                            
  143 0000017C E52D3004        STR              R3,     [SP,    #-4]! ;push max
                                                            
  144 00000180 E52D2004        STR              R2,     [SP,    #-4]! ;push min
                                                            
  145 00000184 EB0000EF        BL               normalise
  146 00000188 E28DD01C        ADD              SP,     SP,     #28 ;pop stack
  147 0000018C         
  148 0000018C E3570002        CMP              R7,     #2  ;boolean check
  149 00000190 0AFFFFAF        BEQ              iteraterepeat
  150 00000194         
  151 00000194 EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
  152 00000198         
  153 00000198 EAFFFFFE 
                       stop    B                stop
  154 0000019C         
  155 0000019C         thresholding
  156 0000019C         ;doesnt matter if this actually gets implemented by end.
                       just for fun
  157 0000019C         ;very simple
  158 0000019C         ;attempts to use thresholds to link and highlight edges
  159 0000019C         ;parameters: 
  160 0000019C         ;low thr high thr row index  column index 
  161 0000019C         ;Memory adress row length column length high thr low thr
                       
  162 0000019C         ;returns pixel R0
  163 0000019C E92D5000        STMFD            SP!,     {LR,R12}
  164 000001A0 E28DC008        ADD              R12,    SP,    #8
  165 000001A4 E92D0FF0        STMFD            SP!,     {R4-R11}
  166 000001A8 E89C07F0        LDMFD            R12,     {R4-R10}
  167 000001AC         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index
  168 000001AC         ;R9=high thr    R10=low thr
  169 000001AC E20AA0FF        AND              R10,    R10,    #0x000000FF
  170 000001B0 E20990FF        AND              R9,     R9,    #0x000000FF ;jus
                                                            t in case u chose t
                                                            h>255
  171 000001B4         
  172 000001B4 E1A0000A        MOV              R0,     R10
  173 000001B8 E1A0100A        MOV              R1,     R10
  174 000001BC E1A0200A        MOV              R2,     R10
  175 000001C0 EB000197        BL               compositeColors
  176 000001C4 E1A0A000        MOV              R10,    R0  ;this operation sav
                                                            es operations later



ARM Macro Assembler    Page 5 


                                                            
  177 000001C8         
  178 000001C8 E1A00009        MOV              R0,     R9
  179 000001CC E1A01009        MOV              R1,     R9
  180 000001D0 E1A02009        MOV              R2,     R9
  181 000001D4 EB000192        BL               compositeColors
  182 000001D8 E1A09000        MOV              R9,    R0   ;this operation sav
                                                            es operations later
                                                            
  183 000001DC         
  184 000001DC E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  185 000001E0 E0000895        MUL              R0,     R5,     R8 ;row length 
                                                            by row index
  186 000001E4 E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset
  187 000001E8 E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  188 000001EC E150000A        CMP              R0,     R10 ;sees if pixel is b
                                                            elow lower thr
  189 000001F0 9A00001C        BLS              turnBlack
  190 000001F4 E1500009        CMP              R0,     R9  ;if pixel>=higher t
                                                            hreshold
  191 000001F8 8A000017        BHI              turnWhite
  192 000001FC         
  193 000001FC EB0000F7        BL               getPixelUL
  194 00000200 E150000A        CMP              R0,     R10
  195 00000204 9A000017        BLS              turnBlack
  196 00000208 EB000140        BL               getPixelU
  197 0000020C E150000A        CMP              R0,     R10
  198 00000210 9A000014        BLS              turnBlack
  199 00000214 EB000117        BL               getPixelUR
  200 00000218 E150000A        CMP              R0,     R10
  201 0000021C 9A000011        BLS              turnBlack
  202 00000220 EB000159        BL               getPixelL
  203 00000224 E150000A        CMP              R0,     R10
  204 00000228 9A00000E        BLS              turnBlack
  205 0000022C EB000165        BL               getPixelR
  206 00000230 E150000A        CMP              R0,     R10
  207 00000234 9A00000B        BLS              turnBlack
  208 00000238 EB000121        BL               getPixelBL
  209 0000023C E150000A        CMP              R0,     R10
  210 00000240 9A000008        BLS              turnBlack
  211 00000244 EB000140        BL               getPixelB
  212 00000248 E150000A        CMP              R0,     R10
  213 0000024C 9A000005        BLS              turnBlack
  214 00000250 EB0000F4        BL               getPixelBR
  215 00000254 E150000A        CMP              R0,     R10
  216 00000258 9A000002        BLS              turnBlack
  217 0000025C         turnWhite
  218 0000025C E59F06C4        LDR              R0,=0x00FFFFFF
  219 00000260 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  220 00000264 E8BD9FF0        LDMFD            SP!,     {R4-R12,PC}
  221 00000268         turnBlack
  222 00000268 E3A00000        LDR              R0,=0
  223 0000026C E8BD01F0        LDMFD            SP!,     {R4-R8} 



ARM Macro Assembler    Page 6 


                                                            ;pop parameters
  224 00000270 E8BD9FF0        LDMFD            SP!,     {R4-R12,PC}
  225 00000274         
  226 00000274         
  227 00000274         
  228 00000274         primaryFilter
  229 00000274         ;filters entire pic to only include the colour channels 
                       in mask
  230 00000274         ;R0=addrss      R1=pic height   R2=pic width    R3=mask
  231 00000274 E92D47F0        STMFD            SP!,     {LR,R4-R10}
  232 00000278 E3A04000        LDR              R4,=0       ;column index
  233 0000027C E3A05000        LDR              R5,=0       ;row index
  234 00000280 E1A06000        MOV              R6,     R0
  235 00000284 E1A07001        MOV              R7,     R1
  236 00000288 E1A08002        MOV              R8,     R2  ;local copies of pa
                                                            rameters
  237 0000028C E1A0A003        MOV              R10,    R3
  238 00000290         rowCheck
  239 00000290 E1540008        CMP              R4,     R8
  240 00000294 3A000001        BLO              columnCheck
  241 00000298         ;increment row index and reset column when equal to widt
                       h
  242 00000298 E2855001        ADD              R5,     R5,     #1
  243 0000029C E3A04000        LDR              R4, =0
  244 000002A0         columnCheck
  245 000002A0 E1550007        CMP              R5,     R7
  246 000002A4 2A000006        BHS              finishFilter
  247 000002A8         ;end if row index = height as indexes are 0 indexed
  248 000002A8 E0090895        MUL              R9,     R5,     R8 
                                                            ;width by row index
                                                            
  249 000002AC E0899004        ADD              R9,     R9,     R4 ;column inde
                                                            x + offset
  250 000002B0 E7960109        LDR              R0,     [R6,    R9,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  251 000002B4         
  252 000002B4 E000000A        AND              R0,     R0,     R10
  253 000002B8 E7860109        STR              R0,     [R6,    R9,     LSL #2]
 
                                                            ;replaces old pixel
                                                            
  254 000002BC E2844001        ADD              R4,     R4,     #1
  255 000002C0 EAFFFFF2        b                rowCheck
  256 000002C4         finishFilter
  257 000002C4 E8BD87F0        LDMFD            SP!,     {PC,R4-R10}
  258 000002C8         
  259 000002C8         
  260 000002C8         picToGrey
  261 000002C8         ;converts entire pic to greyscale
  262 000002C8         ;R0=adress,     R1=pic height R2=pic width
  263 000002C8 E92D43F0        STMFD            SP!,     {LR,R4-R9}
  264 000002CC E3A04000        LDR              R4,=0       ;column index
  265 000002D0 E3A05000        LDR              R5,=0       ;row index
  266 000002D4 E1A06000        MOV              R6,     R0
  267 000002D8 E1A07001        MOV              R7,     R1
  268 000002DC E1A08002        MOV              R8,     R2  ;local copies of pa
                                                            rameters



ARM Macro Assembler    Page 7 


  269 000002E0         loop
  270 000002E0 E1540008        CMP              R4,     R8
  271 000002E4 3A000001        BLO              innerloop
  272 000002E8         ;increment row index and reset column when equal to widt
                       h
  273 000002E8 E2855001        ADD              R5,     R5,     #1
  274 000002EC E3A04000        LDR              R4, =0
  275 000002F0         innerloop
  276 000002F0 E1550007        CMP              R5,     R7
  277 000002F4 2A000006        BHS              finishGreying
  278 000002F8         ;end if row index = height as indexes are 0 indexed
  279 000002F8 E0090895        MUL              R9,     R5,     R8 
                                                            ;width by row index
                                                            
  280 000002FC E0899004        ADD              R9,     R9,     R4 ;column inde
                                                            x + offset
  281 00000300 E7960109        LDR              R0,     [R6,    R9,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  282 00000304         
  283 00000304 EB00015A        BL               convertPixelGray
  284 00000308 E7860109        STR              R0,     [R6,    R9,     LSL #2]
 
                                                            ;replaces old pixel
                                                            
  285 0000030C E2844001        ADD              R4,     R4,     #1
  286 00000310 EAFFFFF2        b                loop
  287 00000314         finishGreying
  288 00000314 E8BD83F0        LDMFD            SP!,     {PC,R4-R9}
  289 00000318         
  290 00000318         
  291 00000318         transfer
  292 00000318         ;given two memory address and the width and height it ov
                       erwrites contents
  293 00000318         ;from the second to first
  294 00000318         ;R0 = target address  R1= new address R2 = pic height R3
                        = pic width
  295 00000318         ;returns void
  296 00000318 E92D40F0        STMFD            SP!,     {LR,R4-R7}
  297 0000031C E3A04000        LDR              R4,=0       ;column index
  298 00000320 E3A05000        LDR              R5,=0       ;row index
  299 00000324         for
  300 00000324 E1540003        CMP              R4,     R3
  301 00000328 3A000001        BLO              innerfor
  302 0000032C         ;increment row index and reset column when equal to widt
                       h
  303 0000032C E2855001        ADD              R5,     R5,     #1
  304 00000330 E3A04000        LDR              R4, =0
  305 00000334         innerfor
  306 00000334 E1550002        CMP              R5,     R2
  307 00000338 2A000005        BHS              finishCopy
  308 0000033C         ;end if row index = height as indexes are 0 indexed
  309 0000033C E0060395        MUL              R6,     R5,     R3 ;row length 
                                                            by row index
  310 00000340 E0866004        ADD              R6,     R6,     R4 ;column inde
                                                            x + offset
  311 00000344 E7917106        LDR              R7,     [R1,    R6,     LSL #2]
 



ARM Macro Assembler    Page 8 


                                                            ;gets pixel at new 
                                                            address
  312 00000348 E7807106        STR              R7,     [R0,    R6,     LSL #2]
 
                                                            ;replaces old pixel
                                                            
  313 0000034C E2844001        ADD              R4,     R4,     #1
  314 00000350 EAFFFFF3        b                for
  315 00000354         finishCopy
  316 00000354 E8BD80F0        LDMFD            SP!,     {PC,R4-R7}
  317 00000358         
  318 00000358         edgeDetection
  319 00000358         ;uses sobel edge detection on grayscale image
  320 00000358         ;parameters row index  column index Memory adress row le
                       ngth column length
  321 00000358         ;return pixel R0
  322 00000358 E92D5000        STMFD            SP!,     {LR,R12}
  323 0000035C E28DC008        ADD              R12,    SP,    #8
  324 00000360 E92D0FF0        STMFD            SP!,     {R4-R11}
  325 00000364 E89C01F0        LDMFD            R12,     {R4-R8}
  326 00000368         
  327 00000368 E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  328 0000036C         ;make x kernel        
  329 0000036C E3A0A000        LDR              R10,=0      ;sum x
  330 00000370 EB00009A        BL               getPixelUL
  331 00000374 EB000128        BL               getPicBlue
  332 00000378 E080A00A        ADD              R10,     R0,     R10
  333 0000037C EB000102        BL               getPixelL
  334 00000380 EB000125        BL               getPicBlue
  335 00000384 E1A00080        MOV              R0,     R0,     LSL     #1
  336 00000388 E080A00A        ADD              R10,     R0,     R10
  337 0000038C EB0000CC        BL               getPixelBL
  338 00000390 EB000121        BL               getPicBlue
  339 00000394 E080A00A        ADD              R10,     R0,     R10
  340 00000398         
  341 00000398 EB0000B6        BL               getPixelUR
  342 0000039C EB00011E        BL               getPicBlue
  343 000003A0 E3A01000        LDR              R1,=0
  344 000003A4 E0410000        SUB              R0,     R1,     R0
  345 000003A8 E080A00A        ADD              R10,     R0,     R10
  346 000003AC EB000105        BL               getPixelR
  347 000003B0 EB000119        BL               getPicBlue
  348 000003B4 E1A00080        MOV              R0,     R0,     LSL     #1
  349 000003B8 E3A01000        LDR              R1,=0
  350 000003BC E0410000        SUB              R0,     R1,     R0
  351 000003C0 E080A00A        ADD              R10,     R0,     R10
  352 000003C4 EB000097        BL               getPixelBR
  353 000003C8 EB000113        BL               getPicBlue
  354 000003CC E3A01000        LDR              R1,=0
  355 000003D0 E0410000        SUB              R0,     R1,     R0
  356 000003D4 E090A00A        ADDS             R10,     R0,     R10
  357 000003D8 5A000000        BPL              positive
  358 000003DC E041A00A        SUB              R10,    R1,     R10 ;get abs if
                                                             negative
  359 000003E0         positive
  360 000003E0         ;make y kernel  
  361 000003E0 E3A0B000        LDR              R11,=0      ;sum y
  362 000003E4 EB00007D        BL               getPixelUL



ARM Macro Assembler    Page 9 


  363 000003E8 EB00010B        BL               getPicBlue
  364 000003EC E080B00B        ADD              R11,     R0,     R11
  365 000003F0 EB0000C6        BL               getPixelU
  366 000003F4 EB000108        BL               getPicBlue
  367 000003F8 E1A00080        MOV              R0,     R0,     LSL     #1 
                                                            ;left pixel*2
  368 000003FC E080B00B        ADD              R11,     R0,     R11
  369 00000400 EB00009C        BL               getPixelUR
  370 00000404 EB000104        BL               getPicBlue
  371 00000408 E080B00B        ADD              R11,     R0,     R11
  372 0000040C         
  373 0000040C EB0000AC        BL               getPixelBL
  374 00000410 EB000101        BL               getPicBlue
  375 00000414 E3A01000        LDR              R1,=0
  376 00000418 E0410000        SUB              R0,     R1,     R0
  377 0000041C E080B00B        ADD              R11,     R0,     R11
  378 00000420 EB0000C9        BL               getPixelB
  379 00000424 EB0000FC        BL               getPicBlue
  380 00000428 E1A00080        MOV              R0,     R0,     LSL     #1
  381 0000042C E3A01000        LDR              R1,=0
  382 00000430 E0410000        SUB              R0,     R1,     R0
  383 00000434 E081B00B        ADD              R11,     R1,     R11
  384 00000438 EB00007A        BL               getPixelBR
  385 0000043C EB0000F6        BL               getPicBlue
  386 00000440 E3A01000        LDR              R1,=0
  387 00000444 E0410000        SUB              R0,     R1,     R0
  388 00000448 E090B00B        ADDS             R11,     R0,     R11
  389 0000044C 5A000000        BPL              absolute
  390 00000450 E041B00B        SUB              R11,    R1,     R11 ;get abs if
                                                             negative
  391 00000454         absolute
  392 00000454 E08A000B        ADD              R0,     R10,    R11
  393 00000458         ;to detect edge we need to combine the y and x component
                       s
  394 00000458         ;the approximation of sobel is to add the absolute value
                        of both rather
  395 00000458         ;than combine the x and y using sqrt and squaring them
  396 00000458         ;this saves a lot of computing time because sqrt is not 
                       trivial in assembly
  397 00000458         ;and there are a lot of pixels
  398 00000458         
  399 00000458 E35000FF        CMP              R0,     #0x000000FF
  400 0000045C 3A000000        BLO              maxintensity ;to set to max if 
                                                            greater than 255
  401 00000460 E3A000FF        LDR              R0,=0x000000FF
  402 00000464         maxintensity
  403 00000464         ;technically unecessary but better safe then sorry
  404 00000464 E20000FF        AND              R0,    R0,    #0x000000FF ;clea
                                                            rs any overflow
  405 00000468 E1A01000        MOV              R1,     R0
  406 0000046C E1A02000        MOV              R2,     R0
  407 00000470 EB0000EB        BL               compositeColors
  408 00000474         
  409 00000474 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  410 00000478 E8BD9FF0        LDMFD            SP!,     {R4-R12,PC}
  411 0000047C         
  412 0000047C         ;used for noise reduction,we will only change intensity/
                       luminosity



ARM Macro Assembler    Page 10 


  413 0000047C         ;smooths high frequency(drastic change in intensity) com
                       ponents
  414 0000047C         ;technically not a great filter as it loses weak edges d
                       ue to being linear
  415 0000047C         ;however better than nothing I presume(unless we assume 
                       image has no noise)
  416 0000047C         gaussianBlur
  417 0000047C         ;applies a gaussian blur on the pixel
  418 0000047C         ;parameters row index  column index Memory adress row le
                       ngth column length
  419 0000047C         ;return pixel R0
  420 0000047C E92D5000        STMFD            SP!,     {LR,R12}
  421 00000480 E28DC008        ADD              R12,    SP,    #8
  422 00000484 E92D0FF0        STMFD            SP!,     {R4-R11}
  423 00000488 E89C01F0        LDMFD            R12,     {R4-R8}
  424 0000048C         
  425 0000048C         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index             
  426 0000048C E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  427 00000490 E3A0A000        LDR              R10,=0
  428 00000494         
  429 00000494 EB000051        BL               getPixelUL
  430 00000498 EB0000DF        BL               getPicBlue
  431 0000049C E08AA000        ADD              R10,    R10,    R0 ;ul*1
  432 000004A0 EB00009A        BL               getPixelU
  433 000004A4 EB0000DC        BL               getPicBlue
  434 000004A8 E1A00080        MOV              R0,     R0,      LSL     #1 
                                                            ;u*2
  435 000004AC E08AA000        ADD              R10,    R10,    R0
  436 000004B0 EB000070        BL               getPixelUR
  437 000004B4 EB0000D8        BL               getPicBlue
  438 000004B8 E08AA000        ADD              R10,    R10,    R0 ;ur*1
  439 000004BC         
  440 000004BC EB000080        BL               getPixelBL
  441 000004C0 EB0000D5        BL               getPicBlue
  442 000004C4 E08AA000        ADD              R10,    R10,    R0 ;bl*1
  443 000004C8 EB000056        BL               getPixelBR
  444 000004CC EB0000D2        BL               getPicBlue
  445 000004D0 E08AA000        ADD              R10,    R10,    R0 ;br*1
  446 000004D4 EB00009C        BL               getPixelB
  447 000004D8 EB0000CF        BL               getPicBlue
  448 000004DC E1A00080        MOV              R0,     R0,      LSL     #1 
                                                            ;b*2
  449 000004E0 E08AA000        ADD              R10,    R10,    R0
  450 000004E4         
  451 000004E4 EB0000A8        BL               getPixelL
  452 000004E8 EB0000CB        BL               getPicBlue
  453 000004EC E1A00080        MOV              R0,     R0,     LSL     #1 ;l*2
                                                            
  454 000004F0 E08AA000        ADD              R10,    R10,    R0
  455 000004F4 EB0000B3        BL               getPixelR
  456 000004F8 EB0000C7        BL               getPicBlue
  457 000004FC E1A00080        MOV              R0,     R0,     LSL     #1 ;r*2
                                                            
  458 00000500 E08AA000        ADD              R10,    R10,    R0
  459 00000504         
  460 00000504         
  461 00000504 E0000895        MUL              R0,     R5,     R8 ;row length 



ARM Macro Assembler    Page 11 


                                                            by row index
  462 00000508 E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset
  463 0000050C E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  464 00000510 EB0000C1        BL               getPicBlue
  465 00000514 E1A00100        MOV              R0,     R0,     LSL     #2 
                                                            ;4*current pixel
  466 00000518         
  467 00000518 E08AA000        ADD              R10,    R10,    R0
  468 0000051C E1A0A22A        MOV              R10,    R10,    LSR     #4 
                                                            ;divide by 16
  469 00000520         
  470 00000520 E35A00FF        CMP              R10,     #0x000000FF
  471 00000524 3A000000        BLO              notmaxgrey  ;to set to max if g
                                                            reater than 255
  472 00000528 E3A0A0FF        LDR              R10,=0x000000FF
  473 0000052C         notmaxgrey
  474 0000052C         ;technically unecessary but better safe then sorry
  475 0000052C E20AA0FF        AND              R10,    R10,    #0x000000FF ;cl
                                                            ears any overflow
  476 00000530         
  477 00000530 E1A0000A        MOV              R0,     R10
  478 00000534 E1A0100A        MOV              R1,     R10
  479 00000538 E1A0200A        MOV              R2,     R10
  480 0000053C EB0000B8        BL               compositeColors
  481 00000540         
  482 00000540 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  483 00000544 E8BD9FF0        LDMFD            SP!,     {R4-R12,PC}
  484 00000548         
  485 00000548         ;used to emphasize edges and de-emphasise noise
  486 00000548         normalise
  487 00000548         ;normalises the pixels of the image given a max and a mi
                       n
  488 00000548         ;parameters memory adress row length column length max m
                       in
  489 00000548         ;returns void
  490 00000548 E92D5000        STMFD            SP!,     {LR,R12}
  491 0000054C E28DC008        ADD              R12,    SP,    #8
  492 00000550 E92D0FF0        STMFD            SP!,     {R4-R11}
  493 00000554 E89C01F0        LDMFD            R12,     {R4-R8}
  494 00000558         ;R8=mem R7=row length R6=column length R5=min R4=max
  495 00000558         ;R0 = column index      R1 = row index
  496 00000558 E0441005        SUB              R1,     R4,     R5 ;max-min
  497 0000055C E3510000        CMP              R1,     #0  ;range of 0 cannot 
                                                            be mapped to new ra
                                                            nge
  498 00000560 9A00001D        BLS              finishnorm
  499 00000564 E3A000FF        LDR              R0,=255     ;new normalised ran
                                                            ge
  500 00000568 EB0000DB        BL               division
  501 0000056C E1A0A000        MOV              R10,     R0 ;ratio
  502 00000570         
  503 00000570 E3A00000        LDR              R0,=0
  504 00000574 E3A01000        LDR              R1,=0
  505 00000578         



ARM Macro Assembler    Page 12 


  506 00000578         pass
  507 00000578 E1500007        CMP              R0,     R7
  508 0000057C 3A000001        BLO              samerow
  509 00000580         ;increment row index and reset column when equal to widt
                       h
  510 00000580 E2811001        ADD              R1,     R1,     #1
  511 00000584 E3A00000        LDR              R0, =0
  512 00000588         samerow
  513 00000588 E1510006        CMP              R1,     R6
  514 0000058C 2A000012        BHS              finishnorm
  515 00000590         ;end if row index = height as indexes are 0 indexed
  516 00000590 E0020791        MUL              R2,     R1,     R7 ;row length 
                                                            by row index
  517 00000594 E0822000        ADD              R2,     R2,     R0 ;column inde
                                                            x + offset
  518 00000598 E7989102        LDR              R9,     [R8,    R2,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  519 0000059C         
  520 0000059C E92D0007        STMFD            SP!,     {R0-R2} ;push
  521 000005A0 E1A00009        MOV              R0,     R9  ;move value
  522 000005A4 EB00009C        BL               getPicBlue
  523 000005A8 E0400005        SUB              R0,     R0,     R5 ;pixel-min
  524 000005AC E000009A        MUL              R0,     R10,     R0 ;*ratio
  525 000005B0 E35000FF        CMP              R0,     #0x000000FF
  526 000005B4 3A000000        BLO              notoverrange ;to set to max if 
                                                            greater than 255
  527 000005B8 E3A000FF        LDR              R0,=0x000000FF
  528 000005BC         notoverrange
  529 000005BC E1A01000        MOV              R1,     R0
  530 000005C0 E1A02000        MOV              R2,     R0
  531 000005C4 EB000096        BL               compositeColors
  532 000005C8 E1A09000        MOV              R9,     R0
  533 000005CC E8BD0007        LDMFD            SP!,     {R0-R2} ;pop
  534 000005D0         
  535 000005D0 E7889102        STR              R9,     [R8,    R2,     LSL #2]
 
                                                            ;stores pixel at ad
                                                            dress
  536 000005D4         
  537 000005D4 E2800001        ADD              R0,     R0,     #1 ;increment c
                                                            olumn index
  538 000005D8 EAFFFFE6        b                pass
  539 000005DC         finishnorm
  540 000005DC E8BD9FF0        LDMFD            SP!,     {R4-R12,PC}
  541 000005E0         
  542 000005E0         ;due to boolean checking on assembly requiring many inst
                       ructions
  543 000005E0         ;and labels and due to the already large size of my code
                       
  544 000005E0         ;I decided to take easy way for ease and not clone symme
                       trically opp pixel
  545 000005E0         
  546 000005E0         
  547 000005E0         getPixelUL
  548 000005E0         ;gets upper left pixel or clones bottom otherwise
  549 000005E0         ;parameters     row index  column index  memory adress r
                       ow length column length



ARM Macro Assembler    Page 13 


  550 000005E0         ;returns pixel R0
  551 000005E0 E92D5000        STMFD            SP!,     {LR,R12}
  552 000005E4 E28DC008        ADD              R12,    SP,    #8
  553 000005E8 E92D0FF0        STMFD            SP!,     {R4-R11}
  554 000005EC E89C01F0        LDMFD            R12,     {R4-R8}
  555 000005F0         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index
  556 000005F0         
  557 000005F0 E3580001        CMP              R8,     #1  ;is row index less 
                                                            than 0
  558 000005F4 3A000007        BLO              godown
  559 000005F8         
  560 000005F8 E3570001        CMP              R7,     #1  ;is column index<0
  561 000005FC 3A000005        BLO              godown
  562 00000600         
  563 00000600 E2477001        SUB              R7,     R7,     #1
  564 00000604 E2488001        SUB              R8,     R8,     #1
  565 00000608         
  566 00000608 E0000895        MUL              R0,     R5,     R8 ;row length 
                                                            by row index
  567 0000060C E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset
  568 00000610 E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  569 00000614 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  570 00000618         godown
  571 00000618         
  572 00000618 E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  573 0000061C EB00004A        BL               getPixelB
  574 00000620 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  575 00000624         
  576 00000624 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  577 00000628         
  578 00000628         getPixelBR
  579 00000628         ;gets bottom right pixel or clones up otherwise
  580 00000628         ;parameters     row index  column index  memory adress r
                       ow length column length
  581 00000628         ;returns pixel R0
  582 00000628 E92D5000        STMFD            SP!,     {LR,R12}
  583 0000062C E28DC008        ADD              R12,    SP,    #8
  584 00000630 E92D0FF0        STMFD            SP!,     {R4-R11}
  585 00000634 E89C01F0        LDMFD            R12,     {R4-R8}
  586 00000638         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index
  587 00000638         
  588 00000638 E2880001        ADD              R0,     R8,     #1
  589 0000063C E1500004        CMP              R0,     R4  ;is row index>=colu
                                                            mn length/height 
  590 00000640 2A000008        BHS              goup
  591 00000644 E2870001        ADD              R0,     R7,     #1
  592 00000648 E1500005        CMP              R0,     R5  ;is column index>=r
                                                            ow length/width  
  593 0000064C 2A000005        BHS              goup
  594 00000650         
  595 00000650 E2888001        ADD              R8,     R8,     #1



ARM Macro Assembler    Page 14 


  596 00000654 E2877001        ADD              R7,     R7,     #1
  597 00000658         
  598 00000658         
  599 00000658 E0000895        MUL              R0,     R5,     R8 ;row length 
                                                            by row index
  600 0000065C E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset
  601 00000660 E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  602 00000664 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  603 00000668         goup
  604 00000668 E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  605 0000066C EB000027        BL               getPixelU
  606 00000670 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  607 00000674         
  608 00000674 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  609 00000678         
  610 00000678         getPixelUR
  611 00000678         ;gets upper right pixel or clones bottom
  612 00000678         ;parameters     row index  column index  memory adress r
                       ow length column length
  613 00000678         ;returns pixel R0
  614 00000678 E92D5000        STMFD            SP!,     {LR,R12}
  615 0000067C E28DC008        ADD              R12,    SP,    #8
  616 00000680 E92D0FF0        STMFD            SP!,     {R4-R11}
  617 00000684 E89C01F0        LDMFD            R12,     {R4-R8}
  618 00000688         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index
  619 00000688         
  620 00000688 E3580001        CMP              R8,     #1  ;is row index less 
                                                            than 0
  621 0000068C 3A000008        BLO              copydown
  622 00000690 E2870001        ADD              R0,     R7,     #1
  623 00000694 E1500005        CMP              R0,     R5  ;is column index>=r
                                                            ow length/width 
  624 00000698 2A000005        BHS              copydown
  625 0000069C         
  626 0000069C E2488001        SUB              R8,     R8,     #1
  627 000006A0 E2877001        ADD              R7,     R7,     #1
  628 000006A4         
  629 000006A4 E0000895        MUL              R0,     R5,     R8 ;row length 
                                                            by row index
  630 000006A8 E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset
  631 000006AC E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  632 000006B0 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  633 000006B4         copydown
  634 000006B4 E92D01F0        STMFD            SP!,    {R4-R8} 
                                                            ;push parameters
  635 000006B8 EB000023        BL               getPixelB
  636 000006BC E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters



ARM Macro Assembler    Page 15 


  637 000006C0         
  638 000006C0 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  639 000006C4         
  640 000006C4         getPixelBL
  641 000006C4         ;gets bottom left pixel or clones up
  642 000006C4         ;parameters     row index  column index  memory adress r
                       ow length column length
  643 000006C4         ;returns pixel R0
  644 000006C4 E92D5000        STMFD            SP!,     {LR,R12}
  645 000006C8 E28DC008        ADD              R12,    SP,    #8
  646 000006CC E92D0FF0        STMFD            SP!,     {R4-R11}
  647 000006D0 E89C01F0        LDMFD            R12,     {R4-R8}
  648 000006D4         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index
  649 000006D4 E3570001        CMP              R7,     #1  ;to move back a col
                                                            umn
  650 000006D8 3A000008        BLO              copyup      ;if column index<0
  651 000006DC         
  652 000006DC E2880001        ADD              R0,     R8,     #1 
                                                            ;to move down a row
                                                            
  653 000006E0 E1500004        CMP              R0,     R4  ;;is row index>=col
                                                            umn length/height
  654 000006E4 2A000005        BHS              copyup
  655 000006E8         
  656 000006E8 E2477001        SUB              R7,     R7,     #1
  657 000006EC E2888001        ADD              R8,     R8,     #1
  658 000006F0         
  659 000006F0 E0000895        MUL              R0,     R5,     R8 ;row length 
                                                            by row index
  660 000006F4 E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset
  661 000006F8 E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  662 000006FC E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  663 00000700         copyup
  664 00000700 E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  665 00000704 EB000001        BL               getPixelU
  666 00000708 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  667 0000070C         
  668 0000070C E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  669 00000710         
  670 00000710         getPixelU
  671 00000710         ;gets pixel above current pixel or clones bottom one
  672 00000710         ;parameters     row index  column index  memory adress r
                       ow length column length
  673 00000710         ;returns pixel R0
  674 00000710 E92D5000        STMFD            SP!,     {LR,R12}
  675 00000714 E28DC008        ADD              R12,    SP,    #8
  676 00000718 E92D0FF0        STMFD            SP!,     {R4-R11}
  677 0000071C E89C01F0        LDMFD            R12,     {R4-R8}
  678 00000720         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index  
  679 00000720 E3580001        CMP              R8,     #1  ;move back a row
  680 00000724 3A000004        BLO              bottom      ;if <0 clone



ARM Macro Assembler    Page 16 


  681 00000728         
  682 00000728 E2488001        SUB              R8,     R8,     #1
  683 0000072C         
  684 0000072C E0000895        MUL              R0,     R5,     R8 ;row length 
                                                            by row index
  685 00000730 E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset
  686 00000734 E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  687 00000738 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  688 0000073C         bottom
  689 0000073C E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  690 00000740 EB000001        BL               getPixelB
  691 00000744 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  692 00000748         
  693 00000748 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  694 0000074C         
  695 0000074C         getPixelB
  696 0000074C         ;gets pixel below current pixel or clones upper one
  697 0000074C         ;parameters     row index  column index  memory adress r
                       ow length column length
  698 0000074C         ;returns pixel R0
  699 0000074C E92D5000        STMFD            SP!,     {LR,R12}
  700 00000750 E28DC008        ADD              R12,    SP,    #8
  701 00000754 E92D0FF0        STMFD            SP!,     {R4-R11}
  702 00000758 E89C01F0        LDMFD            R12,     {R4-R8}
  703 0000075C         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index  
  704 0000075C E2880001        ADD              R0,     R8,     #1 
                                                            ;move down a row
  705 00000760 E1500004        CMP              R0,   R4    ;if row>=column len
                                                            gth/height  
  706 00000764 2A000004        BHS              upper       ;if <0 clone
  707 00000768         
  708 00000768 E2888001        ADD              R8,     R8,     #1
  709 0000076C         
  710 0000076C E0000895        MUL              R0,     R5,     R8 ;row length 
                                                            by row index
  711 00000770 E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset
  712 00000774 E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  713 00000778 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  714 0000077C         upper
  715 0000077C E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  716 00000780 EBFFFFE2        BL               getPixelU
  717 00000784 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  718 00000788         
  719 00000788 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  720 0000078C         
  721 0000078C         getPixelL



ARM Macro Assembler    Page 17 


  722 0000078C         ;gets pixel left of current pixel or clones one on right
                       
  723 0000078C         ;parameters     row index  column index  memory adress r
                       ow length column length
  724 0000078C         ;returns pixel R0
  725 0000078C E92D5000        STMFD            SP!,     {LR,R12}
  726 00000790 E28DC008        ADD              R12,    SP,    #8
  727 00000794 E92D0FF0        STMFD            SP!,     {R4-R11}
  728 00000798 E89C01F0        LDMFD            R12,     {R4-R8}
  729 0000079C         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index  
  730 0000079C E3570001        CMP              R7,     #1  ;move back a column
                                                             
  731 000007A0 3A000004        BLO              right       ;if <0 clone
  732 000007A4         
  733 000007A4 E2477001        SUB              R7,     R7,     #1
  734 000007A8         
  735 000007A8 E0000895        MUL              R0,     R5,     R8 ;row length 
                                                            by row index
  736 000007AC E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset
  737 000007B0 E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  738 000007B4 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  739 000007B8         right
  740 000007B8 E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  741 000007BC EB000001        BL               getPixelR
  742 000007C0 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  743 000007C4         
  744 000007C4 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  745 000007C8         
  746 000007C8         getPixelR
  747 000007C8         ;gets pixel right of current pixel or clones one on left
                       
  748 000007C8         ;parameters     row index  column index  memory adress r
                       ow length column length
  749 000007C8         ;returns pixel R0
  750 000007C8 E92D5000        STMFD            SP!,     {LR,R12}
  751 000007CC E28DC008        ADD              R12,    SP,    #8
  752 000007D0 E92D0FF0        STMFD            SP!,     {R4-R11}
  753 000007D4 E89C01F0        LDMFD            R12,     {R4-R8}
  754 000007D8         ;R4=column length R5= row length r6=mem address R7=colum
                       n index R8=row index  
  755 000007D8 E2870001        ADD              R0,     R7,     #1 ;move forwar
                                                            d a column 
  756 000007DC E1500005        CMP              R0,     R5  ;compare it vs widt
                                                            h
  757 000007E0 2A000004        BHS              left        ;if <0 clone
  758 000007E4         
  759 000007E4 E2877001        ADD              R7,     R7,     #1
  760 000007E8         
  761 000007E8 E0000895        MUL              R0,     R5,     R8 ;row length 
                                                            by row index
  762 000007EC E0800007        ADD              R0,     R0,     R7 ;column inde
                                                            x + offset



ARM Macro Assembler    Page 18 


  763 000007F0 E7960100        LDR              R0,     [R6,    R0,     LSL #2]
 
                                                            ;gets pixel at addr
                                                            ess
  764 000007F4 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  765 000007F8         left
  766 000007F8 E92D01F0        STMFD            SP!,     {R4-R8} 
                                                            ;push parameters
  767 000007FC EBFFFFE2        BL               getPixelL
  768 00000800 E8BD01F0        LDMFD            SP!,     {R4-R8} 
                                                            ;pop parameters
  769 00000804         
  770 00000804 E8BD9FF0        LDMFD            SP!,     {PC,R4-R12}
  771 00000808         
  772 00000808         getPicRed
  773 00000808         ;gets the red component of a pixel as a number between 0
                       -255
  774 00000808         ;parameter R0 = pixel
  775 00000808         ;returns R0 as red component
  776 00000808 E1A00820        MOV              R0,     R0,      LSR     #16
  777 0000080C E12FFF1E        BX               LR
  778 00000810         
  779 00000810         getPicGreen
  780 00000810         ;gets the green component of a pixel as a number between
                        0-255
  781 00000810         ;parameter R0 = pixel
  782 00000810         ;returns R0 as green component
  783 00000810 E1A00420        MOV              R0,     R0,      LSR     #8
  784 00000814 E20000FF        AND              R0,     R0,     #0x000000FF
  785 00000818 E12FFF1E        BX               LR
  786 0000081C         
  787 0000081C         getPicBlue
  788 0000081C         ;gets the blue component of a pixel as a number between 
                       0-255
  789 0000081C         ;parameter R0 = pixel
  790 0000081C         ;returns R0 as blue component
  791 0000081C E20000FF        AND              R0,     R0,     #0x000000FF
  792 00000820 E12FFF1E        BX               LR
  793 00000824         
  794 00000824         compositeColors
  795 00000824         ;combines the red green and blue components into a singl
                       e colour
  796 00000824         ;parameters R0=red R1=green R2=blue
  797 00000824         ;returns R0 as colour
  798 00000824 E1A00800        MOV              R0,     R0,     LSL     #16 
                                                            ;red in last pos
  799 00000828 E1A01401        MOV              R1,     R1,     LSL     #8 
                                                            ;green in second
  800 0000082C E0800001        ADD              R0,     R0,     R1 ;combine red
                                                             and green
  801 00000830 E0800002        ADD              R0,     R0,     R2 
                                                            ;combine with blue
  802 00000834 E3C004FF        AND              R0,     R0,     #0x00FFFFFF
  803 00000838 E12FFF1E        BX               LR
  804 0000083C         
  805 0000083C         swapRed
  806 0000083C         ;swaps the red component of a pixel with a specified val
                       ue
  807 0000083C         ;parameters     R0=color        R1=red component



ARM Macro Assembler    Page 19 


  808 0000083C         ;returns R0 as new pixel
  809 0000083C E20110FF        AND              R1,     R1,     #0x000000FF ;pr
                                                            events component ov
                                                            er 255
  810 00000840 E1A01801        MOV              R1,     R1,     LSL     #16 
                                                            ;red in last pos
  811 00000844 E38008FF        ORR              R0,     R0,     #0x00FF0000 ;sc
                                                            rambles red of colo
                                                            r
  812 00000848 E0010000        AND              R0,     R1,     R0 ;final color
                                                            
  813 0000084C E12FFF1E        BX               LR
  814 00000850         
  815 00000850         swapGreen
  816 00000850         ;swaps the green component of a pixel with a specified v
                       alue
  817 00000850         ;parameters     R0=color        R1=green component
  818 00000850         ;returns R0 as new pixel
  819 00000850 E20110FF        AND              R1,     R1,     #0x000000FF ;pr
                                                            events component ov
                                                            er 255
  820 00000854 E1A01401        MOV              R1,     R1,     LSL     #8 ;gre
                                                            en in second pos
  821 00000858 E3800CFF        ORR              R0,     R0,     #0x0000FF00 ;sc
                                                            rambles green of co
                                                            lor
  822 0000085C E0010000        AND              R0,     R1,     R0 ;final color
                                                            
  823 00000860 E12FFF1E        BX               LR
  824 00000864         
  825 00000864         swapBlue
  826 00000864         ;swaps the blue component of a pixel with a specified va
                       lue
  827 00000864         ;parameters     R0=color        R1=blue component
  828 00000864         ;returns R0 as new pixel
  829 00000864 E20110FF        AND              R1,     R1,     #0x000000FF ;pr
                                                            events component ov
                                                            er 255
  830 00000868 E38000FF        ORR              R0,     R0,     #0x000000FF ;sc
                                                            rambles blue of col
                                                            or
  831 0000086C E0010000        AND              R0,     R1,     R0 ;final color
                                                            
  832 00000870 E12FFF1E        BX               LR
  833 00000874         
  834 00000874         convertPixelGray
  835 00000874         ;converts a pixel into its grayscale version 
  836 00000874         ;based on apporiximation of colorimetry formula
  837 00000874         ;.2*R + .7*G + .1B
  838 00000874         ;parameters R0=pixel
  839 00000874         ;returns R0=gray pixel
  840 00000874 E92D4010        STMFD            SP!,     {LR,R4}
  841 00000878 E1A04000        MOV              R4,     R0  ;to make copy of pi
                                                            xel
  842 0000087C         
  843 0000087C EBFFFFE1        BL               getPicRed
  844 00000880 E3A01005        LDR              R1,=5       ;to get 1/5 of red 
                                                            value
  845 00000884 EB000014        BL               division



ARM Macro Assembler    Page 20 


  846 00000888 E52D0004        STR              R0,     [SP,    #-4]! ;pushes v
                                                            alue to stack
  847 0000088C E1A00004        MOV              R0,     R4  ;to get original pi
                                                            xel
  848 00000890         
  849 00000890 EBFFFFDE        BL               getPicGreen
  850 00000894 E3A01007        LDR              R1,=7
  851 00000898 E0000091        MUL              R0,     R1,     R0
  852 0000089C E3A0100A        LDR              R1,=10      ;to get 7/10 of red
                                                             value
  853 000008A0 EB00000D        BL               division
  854 000008A4 E52D0004        STR              R0,     [SP,    #-4]! ;pushes v
                                                            alue to stack
  855 000008A8 E1A00004        MOV              R0,     R4  ;to get original pi
                                                            xel
  856 000008AC         
  857 000008AC EBFFFFDA        BL               getPicBlue
  858 000008B0 E3A0100A        LDR              R1,=10      ;to get 1/10 of red
                                                             value
  859 000008B4 EB000008        BL               division
  860 000008B8         
  861 000008B8 E49D1004        LDR              R1,     [SP],    #4 ;pops green
                                                             luminance value
  862 000008BC E0800001        ADD              R0,     R0,     R1
  863 000008C0 E49D1004        LDR              R1,     [SP],    #4
  864 000008C4 E0810000        ADD              R0,     R1,     R0 ;combines al
                                                            l three luminances
  865 000008C8 E20000FF        AND              R0,     R0,     #0x000000FF 
                                                            ;to give max = 255
  866 000008CC E1A01000        MOV              R1,     R0
  867 000008D0 E1A02000        MOV              R2,     R0
  868 000008D4 EBFFFFD2        BL               compositeColors
  869 000008D8 E8BD8010        LDMFD            SP!,     {PC,R4}
  870 000008DC         
  871 000008DC         
  872 000008DC         
  873 000008DC         
  874 000008DC         
  875 000008DC         division
  876 000008DC         ;divides two unsigned integers and returns the quotient
  877 000008DC         ;R0 = Number to be divided
  878 000008DC         ;R1 = divisor
  879 000008DC         ;returns R0 = quotient
  880 000008DC E92D4070        STMFD            SP!,     {LR,R4-R6}
  881 000008E0 E3A04000        LDR              R4,=0
  882 000008E4 E3A05000        LDR              R5,=0       ;quotient
  883 000008E8 E3A06001        LDR              R6,=1       ;for power
  884 000008EC         topowr
  885 000008EC E1500411        CMP              R0,     R1,      LSL     R4
  886 000008F0 9A000001        BLS              wh
  887 000008F4 E2844001        ADD              R4,     R4,     #1 
                                                            ;increment power
  888 000008F8 EAFFFFFB        b                topowr
  889 000008FC         
  890 000008FC         wh
  891 000008FC E0500411        SUBS             R0,     R0,     R1,     LSL    
 R4 
                                                            ;Repeatedly subtrac
                                                            ts divisor



ARM Macro Assembler    Page 21 


  892 00000900 3A000001        BLO              stopwh      ;decreases power if
                                                             too large
  893 00000904 E0855416        ADD              R5,     R5,     R6,     LSL    
 R4 
                                                            ;quotient
  894 00000908 EAFFFFFB        B                wh
  895 0000090C         stopwh
  896 0000090C E0800411        ADD              R0,     R0,     R1,     LSL    
 R4
  897 00000910 E2544001        SUBS             R4,     R4,     #1 ;ends if pow
                                                            er is <0
  898 00000914 3A000000        BLO              enddiv
  899 00000918 EAFFFFF7        b                wh
  900 0000091C         enddiv
  901 0000091C E1A00005        MOV              R0,     R5
  902 00000920 E8BD8070        LDMFD            SP!,     {PC,R4-R6} 
                                                            ;end subroutine
  903 00000924         
  904 00000924         
  905 00000924         
  906 00000924                 END
              0000FFFF 
              00FFFFFF 
Command Line: --debug --xref --apcs=interwork --depend=.\bonuseffect.d -o.\bonu
seffect.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine
="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INT
VEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\b
onuseffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BonusEffect 00000000

Symbol: BonusEffect
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: BonusEffect unused
absolute 00000454

Symbol: absolute
   Definitions
      At line 391 in file BonusEffect.s
   Uses
      At line 389 in file BonusEffect.s
Comment: absolute used once
bottom 0000073C

Symbol: bottom
   Definitions
      At line 688 in file BonusEffect.s
   Uses
      At line 680 in file BonusEffect.s
Comment: bottom used once
columnCheck 000002A0

Symbol: columnCheck
   Definitions
      At line 244 in file BonusEffect.s
   Uses
      At line 240 in file BonusEffect.s
Comment: columnCheck used once
compositeColors 00000824

Symbol: compositeColors
   Definitions
      At line 794 in file BonusEffect.s
   Uses
      At line 175 in file BonusEffect.s
      At line 181 in file BonusEffect.s
      At line 407 in file BonusEffect.s
      At line 480 in file BonusEffect.s
      At line 531 in file BonusEffect.s
      At line 868 in file BonusEffect.s

convertPixelGray 00000874

Symbol: convertPixelGray
   Definitions
      At line 834 in file BonusEffect.s
   Uses
      At line 283 in file BonusEffect.s
Comment: convertPixelGray used once
copydown 000006B4

Symbol: copydown
   Definitions
      At line 633 in file BonusEffect.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 621 in file BonusEffect.s
      At line 624 in file BonusEffect.s

copyup 00000700

Symbol: copyup
   Definitions
      At line 663 in file BonusEffect.s
   Uses
      At line 650 in file BonusEffect.s
      At line 654 in file BonusEffect.s

currentrow 0000006C

Symbol: currentrow
   Definitions
      At line 57 in file BonusEffect.s
   Uses
      At line 53 in file BonusEffect.s
Comment: currentrow used once
division 000008DC

Symbol: division
   Definitions
      At line 875 in file BonusEffect.s
   Uses
      At line 500 in file BonusEffect.s
      At line 845 in file BonusEffect.s
      At line 853 in file BonusEffect.s
      At line 859 in file BonusEffect.s

edgeDetection 00000358

Symbol: edgeDetection
   Definitions
      At line 318 in file BonusEffect.s
   Uses
      At line 82 in file BonusEffect.s
Comment: edgeDetection used once
enddiv 0000091C

Symbol: enddiv
   Definitions
      At line 900 in file BonusEffect.s
   Uses
      At line 898 in file BonusEffect.s
Comment: enddiv used once
final 00000148

Symbol: final
   Definitions
      At line 128 in file BonusEffect.s
   Uses
      At line 59 in file BonusEffect.s
Comment: final used once
finishCopy 00000354

Symbol: finishCopy
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 315 in file BonusEffect.s
   Uses
      At line 307 in file BonusEffect.s
Comment: finishCopy used once
finishFilter 000002C4

Symbol: finishFilter
   Definitions
      At line 256 in file BonusEffect.s
   Uses
      At line 246 in file BonusEffect.s
Comment: finishFilter used once
finishGreying 00000314

Symbol: finishGreying
   Definitions
      At line 287 in file BonusEffect.s
   Uses
      At line 277 in file BonusEffect.s
Comment: finishGreying used once
finisher 00000110

Symbol: finisher
   Definitions
      At line 109 in file BonusEffect.s
   Uses
      At line 66 in file BonusEffect.s
Comment: finisher used once
finishnorm 000005DC

Symbol: finishnorm
   Definitions
      At line 539 in file BonusEffect.s
   Uses
      At line 498 in file BonusEffect.s
      At line 514 in file BonusEffect.s

for 00000324

Symbol: for
   Definitions
      At line 299 in file BonusEffect.s
   Uses
      At line 314 in file BonusEffect.s
Comment: for used once
gaussianBlur 0000047C

Symbol: gaussianBlur
   Definitions
      At line 416 in file BonusEffect.s
   Uses
      At line 73 in file BonusEffect.s
Comment: gaussianBlur used once
getPicBlue 0000081C

Symbol: getPicBlue
   Definitions
      At line 787 in file BonusEffect.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 89 in file BonusEffect.s
      At line 331 in file BonusEffect.s
      At line 334 in file BonusEffect.s
      At line 338 in file BonusEffect.s
      At line 342 in file BonusEffect.s
      At line 347 in file BonusEffect.s
      At line 353 in file BonusEffect.s
      At line 363 in file BonusEffect.s
      At line 366 in file BonusEffect.s
      At line 370 in file BonusEffect.s
      At line 374 in file BonusEffect.s
      At line 379 in file BonusEffect.s
      At line 385 in file BonusEffect.s
      At line 430 in file BonusEffect.s
      At line 433 in file BonusEffect.s
      At line 437 in file BonusEffect.s
      At line 441 in file BonusEffect.s
      At line 444 in file BonusEffect.s
      At line 447 in file BonusEffect.s
      At line 452 in file BonusEffect.s
      At line 456 in file BonusEffect.s
      At line 464 in file BonusEffect.s
      At line 522 in file BonusEffect.s
      At line 857 in file BonusEffect.s

getPicGreen 00000810

Symbol: getPicGreen
   Definitions
      At line 779 in file BonusEffect.s
   Uses
      At line 849 in file BonusEffect.s
Comment: getPicGreen used once
getPicRed 00000808

Symbol: getPicRed
   Definitions
      At line 772 in file BonusEffect.s
   Uses
      At line 843 in file BonusEffect.s
Comment: getPicRed used once
getPixelB 0000074C

Symbol: getPixelB
   Definitions
      At line 695 in file BonusEffect.s
   Uses
      At line 211 in file BonusEffect.s
      At line 378 in file BonusEffect.s
      At line 446 in file BonusEffect.s
      At line 573 in file BonusEffect.s
      At line 635 in file BonusEffect.s
      At line 690 in file BonusEffect.s

getPixelBL 000006C4

Symbol: getPixelBL
   Definitions
      At line 640 in file BonusEffect.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 208 in file BonusEffect.s
      At line 337 in file BonusEffect.s
      At line 373 in file BonusEffect.s
      At line 440 in file BonusEffect.s

getPixelBR 00000628

Symbol: getPixelBR
   Definitions
      At line 578 in file BonusEffect.s
   Uses
      At line 214 in file BonusEffect.s
      At line 352 in file BonusEffect.s
      At line 384 in file BonusEffect.s
      At line 443 in file BonusEffect.s

getPixelL 0000078C

Symbol: getPixelL
   Definitions
      At line 721 in file BonusEffect.s
   Uses
      At line 202 in file BonusEffect.s
      At line 333 in file BonusEffect.s
      At line 451 in file BonusEffect.s
      At line 767 in file BonusEffect.s

getPixelR 000007C8

Symbol: getPixelR
   Definitions
      At line 746 in file BonusEffect.s
   Uses
      At line 205 in file BonusEffect.s
      At line 346 in file BonusEffect.s
      At line 455 in file BonusEffect.s
      At line 741 in file BonusEffect.s

getPixelU 00000710

Symbol: getPixelU
   Definitions
      At line 670 in file BonusEffect.s
   Uses
      At line 196 in file BonusEffect.s
      At line 365 in file BonusEffect.s
      At line 432 in file BonusEffect.s
      At line 605 in file BonusEffect.s
      At line 665 in file BonusEffect.s
      At line 716 in file BonusEffect.s

getPixelUL 000005E0

Symbol: getPixelUL
   Definitions
      At line 547 in file BonusEffect.s
   Uses
      At line 193 in file BonusEffect.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 330 in file BonusEffect.s
      At line 362 in file BonusEffect.s
      At line 429 in file BonusEffect.s

getPixelUR 00000678

Symbol: getPixelUR
   Definitions
      At line 610 in file BonusEffect.s
   Uses
      At line 199 in file BonusEffect.s
      At line 341 in file BonusEffect.s
      At line 369 in file BonusEffect.s
      At line 436 in file BonusEffect.s

godown 00000618

Symbol: godown
   Definitions
      At line 570 in file BonusEffect.s
   Uses
      At line 558 in file BonusEffect.s
      At line 561 in file BonusEffect.s

goup 00000668

Symbol: goup
   Definitions
      At line 603 in file BonusEffect.s
   Uses
      At line 590 in file BonusEffect.s
      At line 593 in file BonusEffect.s

innerfor 00000334

Symbol: innerfor
   Definitions
      At line 305 in file BonusEffect.s
   Uses
      At line 301 in file BonusEffect.s
Comment: innerfor used once
innerloop 000002F0

Symbol: innerloop
   Definitions
      At line 275 in file BonusEffect.s
   Uses
      At line 271 in file BonusEffect.s
Comment: innerloop used once
iterate 0000005C

Symbol: iterate
   Definitions
      At line 51 in file BonusEffect.s
   Uses
      At line 126 in file BonusEffect.s
Comment: iterate used once
iteraterepeat 00000054




ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Symbol: iteraterepeat
   Definitions
      At line 48 in file BonusEffect.s
   Uses
      At line 136 in file BonusEffect.s
      At line 149 in file BonusEffect.s

left 000007F8

Symbol: left
   Definitions
      At line 765 in file BonusEffect.s
   Uses
      At line 757 in file BonusEffect.s
Comment: left used once
loop 000002E0

Symbol: loop
   Definitions
      At line 269 in file BonusEffect.s
   Uses
      At line 286 in file BonusEffect.s
Comment: loop used once
maxcheck 000000E8

Symbol: maxcheck
   Definitions
      At line 96 in file BonusEffect.s
   Uses
      At line 92 in file BonusEffect.s
Comment: maxcheck used once
maxintensity 00000464

Symbol: maxintensity
   Definitions
      At line 402 in file BonusEffect.s
   Uses
      At line 400 in file BonusEffect.s
Comment: maxintensity used once
mincheck 000000F4

Symbol: mincheck
   Definitions
      At line 100 in file BonusEffect.s
   Uses
      At line 98 in file BonusEffect.s
Comment: mincheck used once
movetonextindex 0000013C

Symbol: movetonextindex
   Definitions
      At line 123 in file BonusEffect.s
   Uses
      At line 75 in file BonusEffect.s
      At line 108 in file BonusEffect.s

normalise 00000548

Symbol: normalise



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 486 in file BonusEffect.s
   Uses
      At line 145 in file BonusEffect.s
Comment: normalise used once
notmaxgrey 0000052C

Symbol: notmaxgrey
   Definitions
      At line 473 in file BonusEffect.s
   Uses
      At line 471 in file BonusEffect.s
Comment: notmaxgrey used once
notoverrange 000005BC

Symbol: notoverrange
   Definitions
      At line 528 in file BonusEffect.s
   Uses
      At line 526 in file BonusEffect.s
Comment: notoverrange used once
pass 00000578

Symbol: pass
   Definitions
      At line 506 in file BonusEffect.s
   Uses
      At line 538 in file BonusEffect.s
Comment: pass used once
picToGrey 000002C8

Symbol: picToGrey
   Definitions
      At line 260 in file BonusEffect.s
   Uses
      At line 37 in file BonusEffect.s
Comment: picToGrey used once
positive 000003E0

Symbol: positive
   Definitions
      At line 359 in file BonusEffect.s
   Uses
      At line 357 in file BonusEffect.s
Comment: positive used once
primaryFilter 00000274

Symbol: primaryFilter
   Definitions
      At line 228 in file BonusEffect.s
   Uses
      At line 32 in file BonusEffect.s
Comment: primaryFilter used once
pushminmax 00000100

Symbol: pushminmax
   Definitions
      At line 104 in file BonusEffect.s
   Uses



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

      At line 95 in file BonusEffect.s
      At line 102 in file BonusEffect.s

right 000007B8

Symbol: right
   Definitions
      At line 739 in file BonusEffect.s
   Uses
      At line 731 in file BonusEffect.s
Comment: right used once
rowCheck 00000290

Symbol: rowCheck
   Definitions
      At line 238 in file BonusEffect.s
   Uses
      At line 255 in file BonusEffect.s
Comment: rowCheck used once
samerow 00000588

Symbol: samerow
   Definitions
      At line 512 in file BonusEffect.s
   Uses
      At line 508 in file BonusEffect.s
Comment: samerow used once
sobeldet 000000A8

Symbol: sobeldet
   Definitions
      At line 76 in file BonusEffect.s
   Uses
      At line 65 in file BonusEffect.s
Comment: sobeldet used once
start 00000000

Symbol: start
   Definitions
      At line 18 in file BonusEffect.s
   Uses
      At line 7 in file BonusEffect.s
Comment: start used once
stop 00000198

Symbol: stop
   Definitions
      At line 153 in file BonusEffect.s
   Uses
      At line 153 in file BonusEffect.s
Comment: stop used once
stopwh 0000090C

Symbol: stopwh
   Definitions
      At line 895 in file BonusEffect.s
   Uses
      At line 892 in file BonusEffect.s
Comment: stopwh used once



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

swapBlue 00000864

Symbol: swapBlue
   Definitions
      At line 825 in file BonusEffect.s
   Uses
      None
Comment: swapBlue unused
swapGreen 00000850

Symbol: swapGreen
   Definitions
      At line 815 in file BonusEffect.s
   Uses
      None
Comment: swapGreen unused
swapRed 0000083C

Symbol: swapRed
   Definitions
      At line 805 in file BonusEffect.s
   Uses
      None
Comment: swapRed unused
thresholding 0000019C

Symbol: thresholding
   Definitions
      At line 155 in file BonusEffect.s
   Uses
      At line 120 in file BonusEffect.s
Comment: thresholding used once
topowr 000008EC

Symbol: topowr
   Definitions
      At line 884 in file BonusEffect.s
   Uses
      At line 888 in file BonusEffect.s
Comment: topowr used once
transfer 00000318

Symbol: transfer
   Definitions
      At line 291 in file BonusEffect.s
   Uses
      At line 133 in file BonusEffect.s
Comment: transfer used once
turnBlack 00000268

Symbol: turnBlack
   Definitions
      At line 221 in file BonusEffect.s
   Uses
      At line 189 in file BonusEffect.s
      At line 195 in file BonusEffect.s
      At line 198 in file BonusEffect.s
      At line 201 in file BonusEffect.s
      At line 204 in file BonusEffect.s



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols

      At line 207 in file BonusEffect.s
      At line 210 in file BonusEffect.s
      At line 213 in file BonusEffect.s
      At line 216 in file BonusEffect.s

turnWhite 0000025C

Symbol: turnWhite
   Definitions
      At line 217 in file BonusEffect.s
   Uses
      At line 191 in file BonusEffect.s
Comment: turnWhite used once
upper 0000077C

Symbol: upper
   Definitions
      At line 714 in file BonusEffect.s
   Uses
      At line 706 in file BonusEffect.s
Comment: upper used once
wh 000008FC

Symbol: wh
   Definitions
      At line 890 in file BonusEffect.s
   Uses
      At line 886 in file BonusEffect.s
      At line 894 in file BonusEffect.s
      At line 899 in file BonusEffect.s

68 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      At line 20 in file BonusEffect.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 22 in file BonusEffect.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 24 in file BonusEffect.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 151 in file BonusEffect.s
Comment: putPic used once
5 symbols
412 symbols in table
